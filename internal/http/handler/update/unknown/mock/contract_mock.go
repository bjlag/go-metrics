// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	logger "github.com/bjlag/go-metrics/internal/logger"
	gomock "github.com/golang/mock/gomock"
)

// Mocklog is a mock of log interface.
type Mocklog struct {
	ctrl     *gomock.Controller
	recorder *MocklogMockRecorder
}

// MocklogMockRecorder is the mock recorder for Mocklog.
type MocklogMockRecorder struct {
	mock *Mocklog
}

// NewMocklog creates a new mock instance.
func NewMocklog(ctrl *gomock.Controller) *Mocklog {
	mock := &Mocklog{ctrl: ctrl}
	mock.recorder = &MocklogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklog) EXPECT() *MocklogMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *Mocklog) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info.
func (mr *MocklogMockRecorder) Info(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklog)(nil).Info), msg)
}

// WithField mocks base method.
func (m *Mocklog) WithField(key string, value interface{}) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MocklogMockRecorder) WithField(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*Mocklog)(nil).WithField), key, value)
}
